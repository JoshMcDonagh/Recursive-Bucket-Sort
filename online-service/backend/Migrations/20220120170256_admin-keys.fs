// <auto-generated />
namespace backend.Migrations

open System
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion

[<DbContext(typeof<Database.JoshyContext>)>]
[<Migration("20220120170256_admin-keys")>]
type adminkeys() =
    inherit Migration()

    override this.Up(migrationBuilder:MigrationBuilder) =
        migrationBuilder.AddColumn<bool>(
            name = "IsAdmin"
            ,table = "ApiKeys"
            ,``type`` = "boolean"
            ,nullable = false
            ,defaultValue = "false"
            ) |> ignore


    override this.Down(migrationBuilder:MigrationBuilder) =
        migrationBuilder.DropColumn(
            name = "IsAdmin"
            ,table = "ApiKeys"
            ) |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder
            .HasAnnotation("ProductVersion", "6.0.1")
            .HasAnnotation("Relational:MaxIdentifierLength", 63) |> ignore

        modelBuilder.Entity("Database+ApiKey", (fun b ->

            b.Property<string>("Id")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<bool>("IsAdmin")
                .IsRequired(true)
                .HasColumnType("boolean")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.ToTable("ApiKeys") |> ignore

        )) |> ignore

        modelBuilder.Entity("Database+Result", (fun b ->

            b.Property<int>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                |> ignore

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id")) |> ignore

            b.Property<int>("ArraySize")
                .IsRequired(true)
                .HasColumnType("integer")
                |> ignore

            b.Property<TimeSpan>("Duration")
                .IsRequired(true)
                .HasColumnType("interval")
                |> ignore

            b.Property<string>("Language")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<Database.ResultMetadata>("Metadata")
                .IsRequired(true)
                .HasColumnType("jsonb")
                |> ignore

            b.Property<int>("ResultSetId")
                .IsRequired(true)
                .HasColumnType("integer")
                |> ignore

            b.Property<string>("SortingAlgorithm")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<DateTimeOffset>("Taken")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("ResultSetId")
                |> ignore

            b.ToTable("Results") |> ignore

        )) |> ignore

        modelBuilder.Entity("Database+ResultSet", (fun b ->

            b.Property<int>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                |> ignore

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id")) |> ignore

            b.Property<string>("ApiKeyId")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("ApiKeyId")
                |> ignore

            b.ToTable("ResultSets") |> ignore

        )) |> ignore
        modelBuilder.Entity("Database+Result", (fun b ->
            b.HasOne("Database+ResultSet", "ResultSet")
                .WithMany()
                .HasForeignKey("ResultSetId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("Database+ResultSet", (fun b ->
            b.HasOne("Database+ApiKey", "ApiKey")
                .WithMany()
                .HasForeignKey("ApiKeyId")
                |> ignore

        )) |> ignore

