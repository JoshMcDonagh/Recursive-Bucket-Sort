// <auto-generated />
namespace backend.Migrations

open System
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion
open Npgsql.EntityFrameworkCore.PostgreSQL.Metadata

[<DbContext(typeof<Database.JoshyContext>)>]
[<Migration("20220120153237_simplify")>]
type simplify() =
    inherit Migration()

    override this.Up(migrationBuilder:MigrationBuilder) =
        migrationBuilder.CreateTable(
            name = "ApiKeys"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "text"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_ApiKeys", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "ResultSets"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "integer"
                    ).Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                ApiKeyId =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "text"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_ResultSets", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_ResultSets_ApiKeys_ApiKeyId"
                        ,column = (fun x -> (x.ApiKeyId) :> obj)
                        ,principalTable = "ApiKeys"
                        ,principalColumn = "Id"
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "Results"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "integer"
                    ).Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                Taken =
                    table.Column<DateTimeOffset>(
                        nullable = false
                        ,``type`` = "timestamp with time zone"
                    )
                Duration =
                    table.Column<TimeSpan>(
                        nullable = false
                        ,``type`` = "interval"
                    )
                Language =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "text"
                    )
                SortingAlgorithm =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "text"
                    )
                ArraySize =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "integer"
                    )
                ResultSetId =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "integer"
                    )
                Metadata =
                    table.Column<Database.ResultMetadata>(
                        nullable = false
                        ,``type`` = "jsonb"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Results", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_Results_ResultSets_ResultSetId"
                        ,column = (fun x -> (x.ResultSetId) :> obj)
                        ,principalTable = "ResultSets"
                        ,principalColumn = "Id"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_Results_ResultSetId"
            ,table = "Results"
            ,column = "ResultSetId"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_ResultSets_ApiKeyId"
            ,table = "ResultSets"
            ,column = "ApiKeyId"
            ) |> ignore


    override this.Down(migrationBuilder:MigrationBuilder) =
        migrationBuilder.DropTable(
            name = "Results"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "ResultSets"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "ApiKeys"
            ) |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder
            .HasAnnotation("ProductVersion", "6.0.1")
            .HasAnnotation("Relational:MaxIdentifierLength", 63) |> ignore

        modelBuilder.Entity("Database+ApiKey", (fun b ->

            b.Property<string>("Id")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.ToTable("ApiKeys") |> ignore

        )) |> ignore

        modelBuilder.Entity("Database+Result", (fun b ->

            b.Property<int>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                |> ignore

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id")) |> ignore

            b.Property<int>("ArraySize")
                .IsRequired(true)
                .HasColumnType("integer")
                |> ignore

            b.Property<TimeSpan>("Duration")
                .IsRequired(true)
                .HasColumnType("interval")
                |> ignore

            b.Property<string>("Language")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<Database.ResultMetadata>("Metadata")
                .IsRequired(true)
                .HasColumnType("jsonb")
                |> ignore

            b.Property<int>("ResultSetId")
                .IsRequired(true)
                .HasColumnType("integer")
                |> ignore

            b.Property<string>("SortingAlgorithm")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<DateTimeOffset>("Taken")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("ResultSetId")
                |> ignore

            b.ToTable("Results") |> ignore

        )) |> ignore

        modelBuilder.Entity("Database+ResultSet", (fun b ->

            b.Property<int>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                |> ignore

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id")) |> ignore

            b.Property<string>("ApiKeyId")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("ApiKeyId")
                |> ignore

            b.ToTable("ResultSets") |> ignore

        )) |> ignore
        modelBuilder.Entity("Database+Result", (fun b ->
            b.HasOne("Database+ResultSet", "ResultSet")
                .WithMany()
                .HasForeignKey("ResultSetId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("Database+ResultSet", (fun b ->
            b.HasOne("Database+ApiKey", "ApiKey")
                .WithMany()
                .HasForeignKey("ApiKeyId")
                |> ignore

        )) |> ignore

